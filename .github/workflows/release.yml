name: Create Release

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.0.0
  workflow_dispatch:  # Allows manual triggering
    inputs:
      version:
        description: 'Version tag (e.g., v2025.09.04.00)'
        required: false
        type: string

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Get version from tag or input
      id: get_version
      run: |
        if [[ "${{ github.event.inputs.version }}" != "" ]]; then
          VERSION="${{ github.event.inputs.version }}"
        elif [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          # Extract from version.php as fallback
          VERSION_LINE=$(grep '$plugin->version' version.php)
          if [[ $VERSION_LINE =~ \$plugin-\>version[[:space:]]*=[[:space:]]*([0-9]+) ]]; then
            VERSION_NUMBER="${BASH_REMATCH[1]}"
            YEAR=${VERSION_NUMBER:0:4}
            MONTH=${VERSION_NUMBER:4:2}
            DAY=${VERSION_NUMBER:6:2}
            PATCH=${VERSION_NUMBER:8:2}
            VERSION="v${YEAR}.${MONTH}.${DAY}.${PATCH}"
          else
            VERSION="dev-$(date +%Y%m%d%H%M%S)"
          fi
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
    
    - name: Validate plugin structure
      run: |
        echo "🔍 Validating plugin structure..."
        
        # Check required files
        required_files=(
          "version.php"
          "lib.php"
          "settings.php"
          "lang/en/format_alpy.php"
        )
        
        for file in "${required_files[@]}"; do
          if [[ ! -f "$file" ]]; then
            echo "❌ Missing required file: $file"
            exit 1
          else
            echo "✅ Found: $file"
          fi
        done
        
        # Validate version.php content
        if grep -q "format_alpy" version.php; then
          echo "✅ Plugin component name is correct"
        else
          echo "❌ Plugin component name not found in version.php"
          exit 1
        fi
        
        echo "✅ Plugin structure validation passed"
    
    - name: Create plugin archive
      run: |
        echo "📦 Creating plugin archive..."
        
        # Create a temporary directory for the plugin
        mkdir -p alpy-release/alpy
        
        # Define files to exclude
        exclude_patterns=(
          '.git*'
          'node_modules'
          '*.log'
          '*.tmp'
          '.DS_Store'
          'Thumbs.db'
          '.vscode'
          '.idea'
          '*.swp'
          '*.swo'
          '*~'
          'vendor'
          'coverage'
          '.phpunit.result.cache'
          '.env*'
          '*.zip'
          '*.tar.gz'
          'build-*'
        )
        
        # Build rsync exclude parameters
        exclude_params=""
        for pattern in "${exclude_patterns[@]}"; do
          exclude_params="$exclude_params --exclude='$pattern'"
        done
        
        # Copy all files except excluded ones
        eval "rsync -av $exclude_params ./ alpy-release/alpy/"
        
        # Create the ZIP file
        cd alpy-release
        zip -r ../format_alpy_${{ steps.get_version.outputs.version }}.zip alpy/ -x "*.DS_Store" "*.git*"
        cd ..
        
        # Get file size and hash
        FILE_SIZE=$(du -h format_alpy_${{ steps.get_version.outputs.version }}.zip | cut -f1)
        FILE_HASH=$(sha256sum format_alpy_${{ steps.get_version.outputs.version }}.zip | cut -d' ' -f1)
        
        echo "archive_size=$FILE_SIZE" >> $GITHUB_ENV
        echo "archive_hash=$FILE_HASH" >> $GITHUB_ENV
        
        echo "✅ Archive created successfully"
        echo "📏 Size: $FILE_SIZE"
        echo "🔑 SHA256: $FILE_HASH"
        
        # Verify the archive
        echo "📋 Archive contents (first 20 files):"
        unzip -l format_alpy_${{ steps.get_version.outputs.version }}.zip | head -20
    
    - name: Generate release notes
      id: release_notes
      run: |
        # Extract version info from version.php
        VERSION_LINE=$(grep '$plugin->version' version.php)
        REQUIRES_LINE=$(grep '$plugin->requires' version.php)
        
        if [[ $VERSION_LINE =~ \$plugin-\>version[[:space:]]*=[[:space:]]*([0-9]+) ]]; then
          PLUGIN_VERSION="${BASH_REMATCH[1]}"
        else
          PLUGIN_VERSION="unknown"
        fi
        
        if [[ $REQUIRES_LINE =~ \$plugin-\>requires[[:space:]]*=[[:space:]]*([0-9]+) ]]; then
          MOODLE_VERSION="${BASH_REMATCH[1]}"
        else
          MOODLE_VERSION="unknown"
        fi
        
        # Count files in the archive
        FILE_COUNT=$(unzip -l format_alpy_${{ steps.get_version.outputs.version }}.zip | grep -E "^[[:space:]]*[0-9]+" | wc -l)
        
        cat > release_notes.md << EOF
        ## 🎓 Alpy Course Format for Moodle

        **📦 Versión del Plugin:** $PLUGIN_VERSION  
        **🔧 Compatibilidad:** Moodle 4.1+ (requires: $MOODLE_VERSION)  
        **📊 Archivos incluidos:** $FILE_COUNT  
        **📏 Tamaño del archivo:** ${{ env.archive_size }}  
        **🔑 SHA256:** \`${{ env.archive_hash }}\`

        ### ✨ Características principales:
        - 🏷️ **Etiquetas personalizadas** por actividad (lectura, proyecto, simulación, etc.)
        - 🔄 **Reordenamiento dinámico** según estilos de aprendizaje del estudiante
        - 🎨 **Iconos adaptativos** que cambian según el tipo de contenido
        - 👤 **Perfil visual** del estudiante (activo/reflexivo, sensitivo/intuitivo)
        - 📈 **Estadísticas para docentes** sobre estilos predominantes en el grupo
        - 🎯 **Experiencia personalizada** de aprendizaje

        ### 📥 Instalación:
        1. Descarga el archivo \`format_alpy_${{ steps.get_version.outputs.version }}.zip\`
        2. Ve a **Administración del sitio → Plugins → Instalar plugins**
        3. Sube el archivo ZIP y sigue las instrucciones
        4. El formato estará disponible en **Configuración del curso → Formato**

        ### 🏗️ Estructura del plugin:
        \`\`\`
        alpy/
        ├── classes/output/courseformat/     # Lógica de renderizado
        ├── templates/local/                 # Plantillas Mustache
        ├── lang/en/ & lang/es/             # Archivos de idioma
        ├── tests/                          # Tests automatizados
        ├── backup/moodle2/                 # Soporte para backup/restore
        └── db/                             # Definiciones de base de datos
        \`\`\`

        ### 🔧 Archivos clave:
        - \`content.php\`: Punto de entrada principal
        - \`section.php\`: Lógica de reordenamiento por estilos de aprendizaje
        - \`cmitem.php\`: Gestión de etiquetas por actividad
        - \`cmicon.php\`: Iconos dinámicos según etiquetas

        ### 🚀 Uso:
        1. Crea un nuevo curso o edita uno existente
        2. En **Configuración → Formato de curso**, selecciona **Alpy**
        3. Las actividades se organizarán automáticamente según el perfil de cada estudiante
        4. Los docentes pueden ver estadísticas del grupo en el bloque de estilos de aprendizaje

        ---
        *🤖 Release generado automáticamente el $(date +"%Y-%m-%d %H:%M:%S UTC") mediante GitHub Actions*  
        *📋 [Ver código fuente](https://github.com/ISCOUTB/alpy) | 🐛 [Reportar issues](https://github.com/ISCOUTB/alpy/issues)*
        EOF
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        name: "🎓 Alpy Course Format ${{ steps.get_version.outputs.version }}"
        body_path: release_notes.md
        files: |
          format_alpy_${{ steps.get_version.outputs.version }}.zip
        draft: false
        prerelease: false
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      with:
        name: format_alpy_${{ steps.get_version.outputs.version }}
        path: format_alpy_${{ steps.get_version.outputs.version }}.zip
        retention-days: 90
    
    - name: Create build summary
      run: |
        echo "## 🎉 Release Created Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 Release Details:" >> $GITHUB_STEP_SUMMARY
        echo "- **Version:** ${{ steps.get_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Archive:** format_alpy_${{ steps.get_version.outputs.version }}.zip" >> $GITHUB_STEP_SUMMARY
        echo "- **Size:** ${{ env.archive_size }}" >> $GITHUB_STEP_SUMMARY
        echo "- **SHA256:** \`${{ env.archive_hash }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 Links:" >> $GITHUB_STEP_SUMMARY
        echo "- [📥 Download Release](https://github.com/ISCOUTB/alpy/releases/tag/${{ steps.get_version.outputs.version }})" >> $GITHUB_STEP_SUMMARY
        echo "- [📋 All Releases](https://github.com/ISCOUTB/alpy/releases)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚀 Next Steps:" >> $GITHUB_STEP_SUMMARY
        echo "1. Test the plugin in a Moodle development environment" >> $GITHUB_STEP_SUMMARY
        echo "2. Install in production following Moodle best practices" >> $GITHUB_STEP_SUMMARY
        echo "3. Share with the Moodle community!" >> $GITHUB_STEP_SUMMARY
